[tool.poetry]
name = "cellannot-gpt"
version = "0.1.0"
description = "AI assistant for annotating single-cell RNA-seq clusters using curated marker knowledge and LLM reasoning."
authors = ["Your Name <you@example.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
openai = "^1.30.0"
pandas = "^2.2.2"
numpy = "^1.26.4"
anndata = "^0.10.7"
fastapi = "^0.111.0"
uvicorn = {version = "^0.30.1", extras = ["standard"]}
streamlit = "^1.36.0"
scikit-learn = "^1.5.0"
rich = "^13.7.1"
pydantic = "^2.7.1"
pydantic-settings = "^2.3.4"
httpx = "^0.27.0"
sqlalchemy = "^2.0.30"
python-dotenv = "^1.0.1"
pyarrow = "^16.1.0"
redis = "^5.0.4"
altair = "^5.3.0"
fpdf2 = "^2.7.0"
structlog = "^24.1.0"
jsonschema = "^4.25.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.1"
black = "^24.4.2"
mypy = "^1.10.0"
ruff = "^0.4.4"
poethepoet = "^0.27.0"
pytest-asyncio = "^0.23.7"
fakeredis = "^2.23.2"
pandas-stubs = "^2.2.2.240807"
types-pyyaml = "^6.0.12.20240808"
types-jsonschema = "^4.23.0.20241019"

[build-system]
requires = ["poetry-core>=1.8.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ["py311"]

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "B", "I", "UP", "N", "RUF"]
ignore = ["B008"]

[tool.mypy]
python_version = "3.11"
warn_unused_configs = true
warn_return_any = true
warn_unused_ignores = true
strict_optional = true
implicit_reexport = false
mypy_path = "$PROJECT_ROOT"

[[tool.mypy.overrides]]
module = [
  "pandas",
  "pandas.*",
  "yaml",
  "yaml.*",
  "jsonschema",
  "jsonschema.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra --strict-markers"
testpaths = ["tests"]
pythonpath = ["."]

[tool.poe.tasks]
install = "poetry install"
lock = "poetry lock"
format = {cmd = "black backend frontend evaluation scripts config tests"}
ruff = {cmd = "ruff check backend frontend evaluation scripts config tests"}
ruff-fix = {cmd = "ruff check --fix backend frontend evaluation scripts config tests"}
typecheck = {cmd = "mypy backend"}
test = {cmd = "pytest"}
lint = {sequence = ["ruff", "typecheck"]}
build-marker-db = {cmd = "python scripts/build_marker_db.py"}
api = {cmd = "uvicorn backend.api.main:app --reload"}
ui = {cmd = "streamlit run frontend/streamlit_app.py"}
