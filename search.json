[{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/articles/annotate-seurat.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Annotate Seurat Clusters with GPT Cell Annotator","text":"gptcellannotator provides end--end bridge Seurat marker discovery GPT Cell Annotator backend. vignette walks recommended pipeline: preparing marker tables, calling API, applying validation guardrails, visualising results UMAP embedding. package defaults HTTPS calls FastAPI service can fall back Python CLI (gca annotate) credentials connectivity unavailable. examples assume access REST API. offline CLI workflow covered end.","code":""},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/articles/annotate-seurat.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Annotate Seurat Clusters with GPT Cell Annotator","text":"Configure base URL API key per session. Environment variables (GPTCA_BASE_URL, GPTCA_API_KEY) take precedence, explicit configuration clearer reproducible scripts.","code":"library(gptcellannotator) library(Seurat) library(tibble) cfg <- gptca_config(   base_url = \"https://api.gpt-cell-annotator.org\",   timeout = 60,   retry_max = 3 ) gptca_config_set(cfg)"},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/articles/annotate-seurat.html","id":"load-markers","dir":"Articles","previous_headings":"","what":"Load markers","title":"Annotate Seurat Clusters with GPT Cell Annotator","text":"Start Seurat object undergone clustering. load demo PBMC object distributed Seurat, compute positive markers per cluster via FindAllMarkers. function returns long data frame columns gene, cluster, avg_log2FC, . first rows look like:","code":"pbmc <- readRDS(\"path/to/pbmc.rds\") markers <- FindAllMarkers(pbmc, only.pos = TRUE, logfc.threshold = 0.25) markers %>% as_tibble() %>% dplyr::group_by(cluster) %>% dplyr::slice_head(n = 3)"},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/articles/annotate-seurat.html","id":"submit-markers-for-annotation","dir":"Articles","previous_headings":"","what":"Submit markers for annotation","title":"Annotate Seurat Clusters with GPT Cell Annotator","text":"gptca_annotate_seurat() handles conversion backend payload, including limiting top markers per cluster sorting avg_log2FC. result gptca_annotation object convenient accessors: clusters – tidy tibble per-cluster labels, ontology IDs, validation status, collected warnings. summary – dataset-level support metrics validation report. raw – full JSON payload need access every nested field.","code":"annotations <- gptca_annotate_seurat(   pbmc,   markers = markers,   species = \"Homo sapiens\",   tissue = \"Peripheral blood\",   return_validated = TRUE,   top_n = 25 ) annotations$clusters annotations$summary"},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/articles/annotate-seurat.html","id":"merge-results-into-seurat-metadata","dir":"Articles","previous_headings":"","what":"Merge results into Seurat metadata","title":"Annotate Seurat Clusters with GPT Cell Annotator","text":"Annotator outputs become part object metadata downstream plots differential analyses can use curated labels. gptca_add_metadata() adds set columns (gptca_label, gptca_confidence, gptca_status, gptca_warnings) keyed existing clustering column. Clusters flagged validation gptca_status set \"flagged\" \"unknown\", warnings column retains backend rationale.","code":"pbmc <- gptca_add_metadata(pbmc, annotations) head(pbmc@meta.data[, c(\"seurat_clusters\", \"gptca_label\", \"gptca_status\")])"},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/articles/annotate-seurat.html","id":"visualise-on-umap","dir":"Articles","previous_headings":"","what":"Visualise on UMAP","title":"Annotate Seurat Clusters with GPT Cell Annotator","text":"gptca_plot_umap() renders ggplot built stored embeddings. Flagged clusters outlined black emphasise groups requiring manual review. plot built ggplot2 can customise scales, themes, overlays using standard syntax.","code":"gptca_plot_umap(pbmc)"},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/articles/annotate-seurat.html","id":"cli-fallback-workflow","dir":"Articles","previous_headings":"","what":"CLI fallback workflow","title":"Annotate Seurat Clusters with GPT Cell Annotator","text":"REST API unreachable, package can shell gca annotate instead. Install CLI (pip install gpt-cell-annotator), ensure gca binary PATH, toggle offline mode config. CLI path automatically discovered GPTCA_CLI_PATH system PATH. Validation guardrails still executed Python CLI ships marker database assets.","code":"offline_cfg <- gptca_config(offline = TRUE, cli_path = Sys.which(\"gca\")) annotations <- gptca_annotate_markers(   markers,   species = \"Homo sapiens\",   config = offline_cfg )"},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/articles/annotate-seurat.html","id":"troubleshooting","dir":"Articles","previous_headings":"","what":"Troubleshooting","title":"Annotate Seurat Clusters with GPT Cell Annotator","text":"401/403 errors – check API key whether backend expects custom headers. 429 rate limits – reduce batch sizes introduce throttling. package automatically retry transient 429/5xx errors exponential backoff. Validation disagreements – inspect annotations$clusters$validation missing markers contradictory evidence. can also access raw JSON via annotations$raw. recipes automation tips, visit pkgdown site published open issue GitHub.","code":""},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"GPT Cell Annotator Team. Author, maintainer.","code":""},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Team G (2025). gptcellannotator: Connect Seurat Workflows GPT Cell Annotator. R package version 0.1.0, https://github.com/jameshyojaelee/CellAnnot-GPT.","code":"@Manual{,   title = {gptcellannotator: Connect Seurat Workflows to GPT Cell Annotator},   author = {GPT Cell Annotator Team},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/jameshyojaelee/CellAnnot-GPT}, }"},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/index.html","id":"gptcellannotator","dir":"","previous_headings":"","what":"GPT Cell Annotator for R","title":"GPT Cell Annotator for R","text":"gptcellannotator connects Seurat workflows GPT Cell Annotator backend. ships streamlined R API validation guardrails, plotting helpers, offline CLI fallback.","code":""},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"GPT Cell Annotator for R","text":"Ensure R 4.3 environment development headers libcurl, openssl, xml2, plus Pandoc ≥ 2.11 vignettes. macOS install Xcode command line tools; Windows install Rtools42.","code":""},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/index.html","id":"github-source-pak-or-remotes","dir":"","previous_headings":"Installation","what":"GitHub source (pak or remotes)","title":"GPT Cell Annotator for R","text":"Run helper script prefer single command:","code":"# pak automatically resolves system + R dependencies if (!require(\"pak\")) install.packages(\"pak\") pak::pkg_install(\"github::jameshyojaelee/CellAnnot-GPT@main?subdir=clients/r/gptcellannotator\")  # or use remotes / devtools remotes::install_github(\"jameshyojaelee/CellAnnot-GPT\", subdir = \"clients/r/gptcellannotator\", build = TRUE) Rscript clients/r/scripts/install_github.R"},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/index.html","id":"local-source-tarball","dir":"","previous_headings":"Installation","what":"Local source tarball","title":"GPT Cell Annotator for R","text":"script clients/r/scripts/install_local_tarball.R automates steps pak::pkg_install() caching dependencies.","code":"R CMD build clients/r/gptcellannotator R CMD INSTALL gptcellannotator_0.1.0.tar.gz"},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/index.html","id":"future-cran-release","dir":"","previous_headings":"Installation","what":"Future CRAN release","title":"GPT Cell Annotator for R","text":"package staged CRAN review. accepted, installation become single step: , rely GitHub source source tarballs generated CI.","code":"install.packages(\"gptcellannotator\")"},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/index.html","id":"optional-python-cli","dir":"","previous_headings":"Installation","what":"Optional Python CLI","title":"GPT Cell Annotator for R","text":"Offline annotations require Python CLI (handled R package automatically available):","code":"pip install gpt-cell-annotator"},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"GPT Cell Annotator for R","text":"","code":"library(gptcellannotator)  cfg <- gptca_config(base_url = \"https://api.gpt-cell-annotator.org\") gptca_config_set(cfg)  pbmc_markers <- system.file(\"extdata\", \"pbmc_markers.csv\", package = \"gptcellannotator\") markers <- read.csv(pbmc_markers)  annotations <- gptca_annotate_markers(   markers,   species = \"Homo sapiens\",   return_validated = TRUE )  annotations$clusters"},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/index.html","id":"seurat-pipeline","dir":"","previous_headings":"Quick start","what":"Seurat pipeline","title":"GPT Cell Annotator for R","text":"","code":"library(Seurat)  pbmc <- readRDS(\"path/to/pbmc.rds\")            # replace with your Seurat object markers <- FindAllMarkers(pbmc)                # positive markers only  annotations <- gptca_annotate_seurat(   pbmc,   markers = markers,   species = \"Homo sapiens\" )  pbmc <- gptca_add_metadata(pbmc, annotations) gptca_plot_umap(pbmc)"},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/index.html","id":"offline-fallback","dir":"","previous_headings":"Quick start","what":"Offline fallback","title":"GPT Cell Annotator for R","text":"Set offline = TRUE export GPTCA_CLI_PATH pointing gca binary. package write markers temp CSV, call gca annotate, parse structured JSON output.","code":"cfg <- gptca_config(offline = TRUE, cli_path = Sys.which(\"gca\")) annotations <- gptca_annotate_markers(markers, config = cfg)"},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/index.html","id":"configuration","dir":"","previous_headings":"","what":"Configuration","title":"GPT Cell Annotator for R","text":"GPTCA_BASE_URL GPTCA_API_KEY override defaults. Tune timeouts retries gptca_config(timeout = 45, retry_max = 5). exported functions accept config override ad-hoc sessions.","code":""},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/index.html","id":"validation-and-guardrails","dir":"","previous_headings":"","what":"Validation and guardrails","title":"GPT Cell Annotator for R","text":"Validated responses include: Per-cluster status (supported, flagged, unknown) Canonical markers ontology identifiers Validation notes (missing_markers, contradictory_markers) Warning strings surfaced Seurat metadata Use annotations$raw inspect full JSON payload.","code":""},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/index.html","id":"rate-limits--costs","dir":"","previous_headings":"","what":"Rate limits & costs","title":"GPT Cell Annotator for R","text":"backend relies OpenAI APIs. Keep marker batches small, reuse caching, add pauses parallelising respect rate limits. Never share API keys saved objects public repos.","code":""},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"GPT Cell Annotator for R","text":"Open issue: https://github.com/jameshyojaelee/CellAnnot-GPT/issues Internal docs: vignette(\"annotate-seurat\", package = \"gptcellannotator\")","code":""},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/reference/gptca_annotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate clusters with GPT Cell Annotator — gptca_annotate_markers","title":"Annotate clusters with GPT Cell Annotator — gptca_annotate_markers","text":"High-level helpers send marker tables GPT Cell Annotator, merge validated labels Seurat metadata, visualise annotations UMAP embeddings.","code":""},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/reference/gptca_annotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate clusters with GPT Cell Annotator — gptca_annotate_markers","text":"","code":"gptca_annotate_markers(   markers,   species = NULL,   tissue = NULL,   return_validated = TRUE,   marker_limit = 50,   offline = NULL,   fallback = TRUE,   config = gptca_config_get(),   cluster_column = NULL,   gene_column = NULL,   markers_column = NULL,   score_column = NULL,   top_n = NULL )  gptca_annotate_seurat(   object,   markers = NULL,   species = NULL,   tissue = NULL,   return_validated = TRUE,   marker_limit = 50,   cluster_column = \"cluster\",   gene_column = \"gene\",   score_column = NULL,   top_n = 25,   offline = NULL,   fallback = TRUE,   config = gptca_config_get() )  gptca_add_metadata(   object,   annotation,   cluster_column = \"seurat_clusters\",   label_col = \"gptca_label\",   confidence_col = \"gptca_confidence\",   status_col = \"gptca_status\",   warnings_col = \"gptca_warnings\" )  gptca_plot_umap(   object,   label_col = \"gptca_label\",   status_col = \"gptca_status\",   reduction = \"umap\",   flagged_status = c(\"flagged\", \"unknown\"),   point_size = 0.6,   alpha = 0.9,   palette = NULL )"},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/reference/gptca_annotate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate clusters with GPT Cell Annotator — gptca_annotate_markers","text":"markers Marker definitions: named list gene symbols, data frame `cluster` `gene` columns (e.g. FindAllMarkers output), data frame `cluster_id` list-column `markers`. species Optional species hint included dataset context. tissue Optional tissue hint. return_validated TRUE (default) request validated report. Set FALSE retrieve raw LLM output single cluster. marker_limit Maximum number markers per cluster. offline Logical flag forcing CLI fallback. Defaults active configuration. fallback Attempt CLI fallback automatically HTTP requests fail. config GptcaConfig object. cluster_column Name column containing cluster IDs marker data frames Seurat metadata. gene_column Name gene column marker data frames. markers_column Name list-column storing marker vectors. score_column Column used rank markers (highest values first). top_n Optional number top markers keep per cluster applying marker_limit. object Seurat object. label_col Metadata column used store primary labels. confidence_col Metadata column confidence values. status_col Metadata column storing validation status. warnings_col Metadata column storing concatenated warnings. annotation gptca_annotation object returned gptca_annotate_markers() gptca_annotate_seurat(). reduction Name reduction containing UMAP embeddings. flagged_status Status values highlighted plot. point_size Point size scatter plot. alpha Point alpha level. palette Optional colour palette overriding defaults.","code":""},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/reference/gptca_annotate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate clusters with GPT Cell Annotator — gptca_annotate_markers","text":"gptca_annotate_markers() gptca_annotate_seurat() return objects class gptca_annotation. gptca_add_metadata() returns modified Seurat object. gptca_plot_umap() returns ggplot2 object.","code":""},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/reference/gptca_annotate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate clusters with GPT Cell Annotator — gptca_annotate_markers","text":"","code":"## Not run:  # markers <- read.csv(system.file(\"extdata\", \"pbmc_markers.csv\", package = \"gptcellannotator\")) # annotations <- gptca_annotate_markers(markers, species = \"Homo sapiens\") # if (requireNamespace(\"Seurat\", quietly = TRUE)) { #   pbmc <- readRDS(\"path/to/pbmc.rds\") #   pbmc <- gptca_add_metadata(pbmc, annotations) #   gptca_plot_umap(pbmc) # } ## End(Not run)"},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/reference/gptca_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure GPT Cell Annotator backend access — gptca_config","title":"Configure GPT Cell Annotator backend access — gptca_config","text":"Create manage configuration objects used communicate GPT Cell Annotator backend. configuration stores base URLs, authentication, CLI fallbacks, retry policies.","code":""},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/reference/gptca_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure GPT Cell Annotator backend access — gptca_config","text":"","code":"gptca_config(   base_url = Sys.getenv(\"GPTCA_BASE_URL\", unset = \"https://api.gpt-cell-annotator.org\"),   api_key = Sys.getenv(\"GPTCA_API_KEY\", unset = NA_character_),   cli_path = Sys.getenv(\"GPTCA_CLI_PATH\", unset = \"\"),   timeout = 120,   retry_max = 3,   retry_backoff = 1,   offline = FALSE,   user_agent = utils::packageName() )  gptca_config_set(config)  gptca_config_get(default = gptca_config())  gptca_config_reset()"},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/reference/gptca_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure GPT Cell Annotator backend access — gptca_config","text":"base_url Base URL FastAPI backend. api_key Optional API key passed Bearer token. cli_path Path `gca` CLI offline fallback; detected automatically supplied. timeout Request timeout seconds. retry_max Maximum retry attempts transient HTTP failures. retry_backoff Initial delay seconds applied exponential backoff. offline Logical flag forcing CLI mode. user_agent Additional user-agent suffix appended requests. config GptcaConfig object activate. default Default configuration returned none active.","code":""},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/reference/gptca_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure GPT Cell Annotator backend access — gptca_config","text":"gptca_config() returns object class GptcaConfig. gptca_config_set() invisibly returns previous config. gptca_config_get() returns currently active config. gptca_config_reset() resets defaults returns new config.","code":""},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/reference/gptca_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure GPT Cell Annotator backend access — gptca_config","text":"","code":"if (interactive()) {   cfg <- gptca_config(base_url = \"https://api.gpt-cell-annotator.org\", timeout = 60)   gptca_config_set(cfg) }"},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/reference/gptcellannotator-package.html","id":null,"dir":"Reference","previous_headings":"","what":"gptcellannotator: Connect Seurat workflows to GPT Cell Annotator — gptcellannotator-package","title":"gptcellannotator: Connect Seurat workflows to GPT Cell Annotator — gptcellannotator-package","text":"R interface GPT Cell Annotator backend. Provides helpers sending marker tables, working Seurat objects, parsing validation reports, plotting annotations.","code":""},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/reference/gptcellannotator-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"gptcellannotator: Connect Seurat workflows to GPT Cell Annotator — gptcellannotator-package","text":"package prefers HTTPS communication via FastAPI service can fall back `gca` CLI offline. Set configuration defaults gptca_config() see vignette(\"annotate-seurat\") complete workflow.","code":""},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/reference/gptcellannotator-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gptcellannotator: Connect Seurat workflows to GPT Cell Annotator — gptcellannotator-package","text":"GPT Cell Annotator Team <support@gpt-cell-annotator.org>","code":""},{"path":[]},{"path":"https://jameshyojaelee.github.io/CellAnnot-GPT/r/news/index.html","id":"gptcellannotator-010","dir":"Changelog","previous_headings":"","what":"gptcellannotator 0.1.0","title":"gptcellannotator 0.1.0","text":"First public milestone hardened installation docs, pkgdown site, REST + CLI transport coverage, Seurat-focused vignette surfaced root documentation hub.","code":""}]
